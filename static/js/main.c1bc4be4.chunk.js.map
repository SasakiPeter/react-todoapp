{"version":3,"sources":["App.js","registerServiceWorker.js","index.js"],"names":["List","props","react_default","a","createElement","todos","map","todo","index","key","title","type","onClick","deleteTodo","className","Input","this","addTodo","refs","newText","value","_this","ref","placeholder","Component","App","_this2","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","setState","toConsumableArray","concat","todoToDelete","indexOf","splice","_this3","App_Input","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.c1bc4be4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\nfunction List(props) {\n  return (\n    <ul>\n      {props.todos.map((todo, index) => {\n        return (\n          <li key={index}>\n            {todo.title}\n            <button\n              type=\"button\"\n              onClick={() => props.deleteTodo(todo)}\n              className=\"dltbtn\"\n            >\n              delete\n            </button>\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nclass Input extends Component {\n  addTodo() {\n    this.props.addTodo(this.refs.newText.value);\n    this.refs.newText.value = \"\";\n  }\n\n  render() {\n    return (\n      <div>\n        <input\n          type=\"text\"\n          ref=\"newText\"\n          className=\"txtbox\"\n          placeholder=\"Task\"\n        />\n        <button type=\"button\" className=\"addbtn\" onClick={() => this.addTodo()}>\n          Add\n        </button>\n      </div>\n    );\n  }\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: [\n        { title: \"tf-idf\" },\n        { title: \"Django\" },\n        { title: \"React\" },\n        { title: \"Vue.js\" }\n      ]\n    };\n  }\n\n  addTodo(value) {\n    if (value !== \"\") {\n      this.setState(state => {\n        const todos = [...state.todos, { title: value }];\n        return { todos };\n      });\n    }\n  }\n\n  deleteTodo(todo) {\n    this.setState(state => {\n      const todos = [...state.todos];\n      const todoToDelete = todos.indexOf(todo);\n      todos.splice(todoToDelete, 1);\n      return { todos };\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>ToDoApp</h1>\n        <Input addTodo={value => this.addTodo(value)} />\n        <List\n          todos={this.state.todos}\n          deleteTodo={todo => this.deleteTodo(todo)}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}